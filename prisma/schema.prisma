generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String      @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String      @unique
  password               String
  isVerified             Boolean     @default(false)
  otp                    String?
  otpExpiry              DateTime?
  passwordResetOtp       String?
  passwordResetOtpExpiry DateTime?
  photo                  String?
  gender                 GenderType?
  birthday               DateTime?
  phone                  String?
  points                 Int         @default(0)
  lastLoginDate          DateTime?
  streak                 Int         @default(0)
  reviews                Review[]
  favorites              Favorite[]
  myBooks                Book[]
  orders                 Order[]
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @default(now()) @updatedAt
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Book {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  cover        String?
  duration     Int
  rating       Float          @default(0)
  audio        String
  price        Float?
  price_points Int?
  is_free      Boolean        @default(false)
  authorId     String?        @db.ObjectId
  Author       Author?        @relation(fields: [authorId], references: [id])
  BookCategory BookCategory[]
  reviews      Review[]
  favorites    Favorite[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  User         User?          @relation(fields: [userId], references: [id])
  userId       String?        @db.ObjectId
  Order        Order[]
}

model Author {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  photo     String?
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  photo        String?
  BookCategory BookCategory[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
}

model BookCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  bookId     String   @db.ObjectId
  categoryId String   @db.ObjectId
  book       Book     @relation(fields: [bookId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
}

model Review {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  bookId        String   @db.ObjectId
  numberOfStars Int
  user          User     @relation(fields: [userId], references: [id])
  book          Book     @relation(fields: [bookId], references: [id])
  createdAt     DateTime @default(now())
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  bookId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  bookId    String      @db.ObjectId
  book      Book        @relation(fields: [bookId], references: [id])
  price     Float       @default(0)
  points    Int         @default(0)
  status    OrderStatus @default(pending) // e.g., pending, completed, failed
  paymentId String? // PayMob payment ID
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

enum GenderType {
  male
  female
}

enum OrderStatus {
  pending
  completed
  failed
}
